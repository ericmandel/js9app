#!/bin/bash
# set -x

NAME="js9"
CDIR=`pwd`
SRCDIR=$CDIR/src
DISTDIR=$CDIR/dist
ANALYSIS_PACKAGES="funtools regions"
NPM_PACKAGES="@electron-forge/maker-pkg"
OSID=`node -e 'console.log(\`${os.platform()}-${os.arch()}\`)'`
OSP=`echo $OSID | awk -F- '{print $1}'`
OSA=`echo $OSID | awk -F- '{print $2}'`
APPLESIGNING="N/A"
if [ x"$OSID" = xdarwin-x64 ]; then
  SSID=`/System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport -I | egrep ' SSID:' | awk '{print $2}'`
  if [ x"$SSID" != xpippint ]; then
    APPLESIGNING=true
  else
    APPLESIGNING=false
  fi
fi

# steps we can take, in order
INIT=false
ANALYSIS=false
JS9=false
DIST=false

error() {
    printf "ERROR: $1\n"
    exit 1
}

# if no args, remake with js9
if [ x"$1" = x ]; then
  echo "usage $0 [build opt]"
  exit 1
fi

# process args
while [ x"$1" != x ]; do
    case $1 in
	--all)
	    INIT=true
	    INITAPP=true
	    ANALYSIS=true
	    JS9=true
	    DIST=true
	    shift
	    continue;;

	--app)
	    JS9=true
	    DIST=true
	    shift
	    continue;;

	--init)
	    INIT=true
	    shift
	    continue;;

	--initapp)
	    INITAPP=true
	    shift
	    continue;;

	--analysis)
	    ANALYSIS=true
	    shift
	    continue;;

	--js9)
	    JS9=true
	    shift
	    continue;;

	--dist)
	    DIST=true
	    shift
	    continue;;

        *) break;;
    esac
done

printf "\nBuilding $NAME app: $OSID `date` ...\n"

# initialize src directory?
if [ x"$INIT" = xtrue ]; then
  printf "\ncreating new $SRCDIR directory\n"
  rm -rf $SRCDIR && mkdir -p $SRCDIR || error "can't init $SRCDIR"
  mkdir -p $DISTDIR || error "can't init $DISTDIR"
fi

# initialize app using electron-forge
if [ x"$INITAPP" = xtrue ]; then
  printf "\nusing electron-forge to set up app ...\n"
  cd $SRCDIR || error "can't enter $src directory"
  if [ ! -r package.json ]; then
    printf "copying js9 package.json file into $SRCDIR\n"
    cp -p $CDIR/../js9/package.json $SRCDIR/. || error "can't copy package.json"
  fi
  printf "electron-forge import\n"
  npx @electron-forge/cli import || error "can't import using electron-forge"
  printf "installing extra electron-forge packages ...\n"
  for pkg in `echo $NPM_PACKAGES`; do
    printf "** install $pkg\n"
    npm install $pkg || error "can't install npm package: $pkg"
  done
  printf "editing package.json\n"
  sed -i .orig -f $CDIR/build/package.sed package.json
  if [ x"$APPLESIGNING" = xtrue ]; then
    printf "editing package.json packager rules (with signing rules)\n"
    sed -e '/"packagerConfig": *{ *}/r'$CDIR/build/sign.add < package.json   | \
    sed -e '/"packagerConfig": *{ *}/d' > npackage.json                     && \
    mv npackage.json package.json
    printf "copying aux files into $SRCDIR\n"
    cp -p $CDIR/build/entitlements.plist $SRCDIR/. || error "can't copy our entitlements file"
  else
    printf "editing package.json packager rules (without signing rules)\n"
    sed -e '/"packagerConfig": *{ *}/r'$CDIR/build/nosign.add < package.json | \
    sed -e '/"packagerConfig": *{ *}/d' > npackage.json                     && \
    mv npackage.json package.json
  fi
fi

# install packages, including js9
if [ x"$JS9" = xtrue ]; then
  PACKAGES="js9 "
fi
if [ x"$ANALYSIS" = xtrue ]; then
  PACKAGES="$PACKAGES $ANALYSIS_PACKAGES"
fi
if [ x"$PACKAGES" != x ]; then
  printf "installing analysis packages ...\n"
fi
for pkg in `echo $PACKAGES`; do
  printf "** install $pkg ...\n"
  case $pkg in
    funtools) XTRA="MAN_SHARE_DIR=$SRCDIR/share/funtools" ;;
    *) XTRA="" ;;
  esac
  cd $CDIR/../$pkg || error "can't enter $pkg directory"
  $CDIR/build/xmake || error "can't make package: $pkg"
  make prefix="$SRCDIR/$OSID" WEBDIR="$SRCDIR" $XTRA install  || error "can't install package: $pkg"
  # funtools removes write permission from libs, which breaks code-signing
  if [ x"$pkg" = xfuntools ]; then
    chmod 644 $SRCDIR/$OSID/lib/libfuntools.a
  fi
  make clean
done
if [ x"$JS9" = xtrue ]; then
  cd $SRCDIR || error "can't cd to $SRCDIR"
  printf 'change workDir to $tmp\n'
  sed 's#\("workDir":.*\)\("./tmp"\)#\1"$tmp"#g' < js9Prefs.json >  njs9Prefs.json && mv njs9Prefs.json js9Prefs.json
fi

# create distribution(s)
if [ x"$DIST" = xtrue ]; then
  printf "\nusing electron-forge to generate app ...\n"
  cd $SRCDIR || error "can't enter $SRCDIR directory"
  # npm run package
  npm run make
  # copy zip file
  if [ x"$APPLESIGNING" = xfalse ]; then
    printf "\nskip copying zip file to dist directory (Apple not signing)\n"
  else
    printf "\ncopying zip file to dist directory ...\n"
    cd $DISTDIR || error "can't enter $DISTDIR directory"
    VER=`sed -n 's#.*"version": *"\([^"]*\)".*$#\1#p' < $CDIR/src/package.json`
    cp -p $SRCDIR/out/make/zip/$OSP/$OSA/${NAME}-${OSID}-${VER}.zip .
  fi
fi
printf "\nAll done!\n\n"
